out = out_df
out = df_out
mindex <- attr(
out, "pandas.index")$values %>% reticulate::py_to_r()
mindex
purrr::map(.x = mindex, .f = ~(.[[3]])) %>% unlist()
lapply(x = mindex, FUN = ~(.[[3]])) %>% unlist()
lapply(x = mindex, FUN = function(x){x[[3]])})
lapply(x = mindex, FUN = function(x){x[[3]]})
lapply(x = mindex, FUN = function(a){a[[3]]})
lapply(list, function)
?lapply
lapply(X = mindex, FUN = function(a){a[[3]]})
lapply(X = mindex, FUN = function(a){a[[3]]}) %>% unlist()
vapply(list = mindex, function = function(a){a[[3]]}) %>% unlist()
vapply(list, function, FUN.VALUE = type, ...)
?vapply
sapply(X = mindex, FUN = function(a){a[[3]]})
vapply(X = mindex, FUN = function(a){a[[3]]})
vapply(X = mindex, FUN = function(a){a[[3]]}, "vector")
vapply(X = mindex, FUN = function(a){a[[3]]}, "int")
vapply(X = mindex, FUN = function(a){a[[3]]}, "integer")
sapply(X = mindex, FUN = function(a){a[[3]]})
sapply(X = mindex, FUN = function(a)a[[3]])
sapply(X = mindex, FUN = function(a) a[[3]])
sapply(X = mindex, FUN = function(.).[[3]])
sapply(X = mindex, FUN = function(.) .[[3]])
sapply(function(.) .[[1]], mindex)
mindex <- attr(
out, "pandas.index")$values %>% reticulate::py_to_r()
sapply(function(.) .[[1]], mindex)
sapply(mindex, function(.) .[[1]])
sapply(mindex, function(.) .[[1]])
inst <- epochs
ch_idx <- 0L:(inst$info["nchan"] - 1L)
sapply(
ch_idx,
function(.) mne$io$pick$channel_type(
info = inst$info, idx = .)) %>%
as.factor()
ch_idx <- 0L:(inst$info["nchan"] - 1L)
install.packages("testthat")
library(testthat)
expect_that()
mne
reticulate::import("mne")
reticulate::import("mne.tests")
reticulate::import("mne.tests.data")
mne_tests <- reticulate::import("mne.tests")
mne_tests
mne$datasets$testing
mne$datasets$testing$data_path
mne$datasets$testing$data_path()
mne$datasets$testing$data_path()
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif", sep = "/")
mne$datasets$testing$data_path()
raw <- mne$io$read_raw_fif(fname)
raw
mne$find_events(raw)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1)
tmin <- -0.1,
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
raw <- mne$io$read_raw_fif(fname)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1:)
tmin <- -0.1,
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
raw <- mne$io$read_raw_fif(fname)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1:)
tmin <- -0.1,
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
raw <- mne$io$read_raw_fif(fname)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1:)
tmin <- -0.1,
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
raw <- mne$io$read_raw_fif(fname)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1L)
tmin <- -0.1,
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
epochs
evoked <- epochs$average()
mne:::get_long_format
expect_equal(1:2, 1:2)
expect_equal(1:2, 1:4)
for (fname in c("a", "b")) {print(fname)}
for (fname in c(data.frame(1:2, 1:2), "b")) {print(fname)}
for (fname in c(epochs,raw)) {print(fname)}
for (inst in data) {
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
for (ii in 1:length(colnames(out_mne_py))){
expect_equal(out_mne_py[,ii], out_mne_r[,ii])
}
}
data <- c(raw, epochs, evoked)
for (inst in data) {
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
for (ii in 1:length(colnames(out_mne_py))){
expect_equal(out_mne_py[,ii], out_mne_r[,ii])
}
}
context
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif",
sep = "/")
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif",
sep = "/")
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif",
sep = "/")
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif",
sep = "/")
mne
print(mne)
mne::mne
mne:::mne
mne:::mne
mne:::mne
mne:::mne
mne:::mne
mne:::mne
mne:::mne
mne:::mne
test_check("mne")
ls()
devtools::test()
devtools::test()
mne
devtools::()
devtools::build()
devtools::install_gitlab("rstudio/testthat")
devtools::install_gitlab("r-lib/testthat")
devtools::install_github("r-lib/testthat")
devtools::test()
test_check("mne")
devtools::build()
usethis::use_test("name")
devtools::build()
library(mne)
mne::get_data_from_mne()
mne::get_data_frame
library(mne)
devtools::build()
devtools::test()
mne:::mne
devtools::build()
devtools::build()
mme
mne
mne::mne
library(mne)
mne::mne
devtools::test()
devtools::test()
devtools::test()
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif",
sep = "/")
raw <- mne$io$read_raw_fif(fname)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1L)
tmin <- -0.1
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
evoked <- epochs$average()
data <- c(raw, epochs, evoked)
for (inst in data) {
print(inst)
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
}
for (inst in data) {
print(inst)
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
for (ii in 1:length(colnames(out_mne_py))) {
expect_equal(out_mne_py[,ii], out_mne_r[,ii])
}
}
out_mne_py[,ii]
out_mne_py %>% colnames
out_mne_r %>% colnames
out_mne_py[,5]
out_mne_py[,4]
out_mne_py[,4], out_mne_r[,4]
out_mne_py[,4] == out_mne_r[,4]
out_mne_py[,5] == out_mne_r[,5]
out_mne_py[,3] == out_mne_r[,3]
out_mne_py[,3]
out_mne_r[,3]
nrow(mindex)
devtools::build()
devtools::test()
devtools::build()
devtools::test()
fname <- paste(
mne$datasets$testing$data_path(),
"MEG",
"sample",
"sample_audvis_trunc_raw.fif",
sep = "/")
raw <- mne$io$read_raw_fif(fname)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"
event_id <- list(aud = 1L)
tmin <- -0.1
tmax <- 0.1
reject <- NULL
baseline <- NULL
epochs <- mne$Epochs(
raw = raw, events = events, event_id = event_id, tmin = tmin,
tmax = tmax, baseline = baseline, preload = T, proj = F,
reject = NULL)
evoked <- epochs$average()
data <- c(raw, epochs, evoked)
for (inst in data) {
print(inst)
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
for (ii in 1:length(colnames(out_mne_py))) {
expect_equal(out_mne_py[,ii], out_mne_r[,ii])
}
}
out_mne_py
out_mne_r
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_r[,1]
out_mne_r[,2]
out_mne_r[,3]
out_mne_r[,4]
out_mne_r[,2]
out_mne_r[,1
out_mne_r[,1]
out_mne_r[,2]
out_mne_r[,3]
out_mne_r[,4]
out_mne_r[,5]
out_mne_r[,1]
colnames(out_mne_py)
colnames(out_mne_r)
out_mne_r[,1]
out <- inst$to_data_frame(
picks = picks, index = index, scaling_time = scaling_time,
scalings = scalings, copy = copy, start = start, stop = stop)
out <- inst$to_data_frame(
picks = picks, index = index, scaling_time = scaling_time,
scalings = scalings, copy = copy, start = start, stop = stop)
out_mne_r[,1]
inst
picks = NULL, index = NULL,
scaling_time = 1e3, scalings = NULL,
copy = T, start = NULL, stop = NULL
(picks = NULL, index = NULL,
scaling_time = 1e3, scalings = NULL,
copy = T, start = NULL, stop = NULL)
(picks = NULL, index = NULL,
scaling_time = 1e3, scalings = NULL,
copy = T, start = NULL, stop = NULL)
out <- inst$to_data_frame()
out
# common steps
ch_idx <- 0L:(inst$info["nchan"] - 1L)
ch_type <- sapply(
ch_idx, function(.) mne$io$pick$channel_type(inst$info, .)) %>%
as.factor()
observation <- out %>%
as.matrix() %>%
t() %>%
matrix(nrow =  prod(out %>% dim(.)))
channel <- out %>% colnames() %>% rep(., times = dim(out)[1])
mindex <- attr(
out, "pandas.index")$values %>% reticulate::py_to_r()
n_rows <- nrow(mindex)
n_rows
mindex %>% shape
mindex %>% dim
mindex
attr(
out, "pandas.index")$values
mindex <- attr(
out, "pandas.index")$values %>% reticulate::py_to_r()
n_rows <- nrow(mindex)
condition <- sapply(mindex, function(.) .[[1]])
epoch <- sapply(mindex, function(.) .[[2]])
time <- sapply(mindex, function(.) .[[3]])
condition
time
epoch
channel
channel %>% length()
dim(out)[1]
dim(out)[2]
n_chan<- dim(out)[2]
devtools::build()
devtools::test()
out
time <- sapply(mindex, function(.) .[[3]])
time
time %>% rep(each = n_chans)
time %>% rep(each = n_chan)
devtools::test()
for (inst in data) {
print(inst)
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
}
out_mne_py
out_mne_py %>% str()
out_mne_r %>% str()
data <- c(raw, epochs, evoked)[1:2]
for (inst in data) {
print(inst)
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
for (ii in 1:length(colnames(out_mne_py))) {
expect_equal(out_mne_py[,ii], out_mne_r[,ii])
}
}
out_mne_r[, ii]
out_mne_r %>% str
out_mne_py %>% str
devtools::test()
devtools::test()
data <- c(raw, epochs, evoked)[1:2]
for (inst in data) {
print(inst)
out_mne_py <- inst$to_data_frame(long_format = T)
out_mne_r <- mne:::get_long_format(
inst, picks = NULL, index = NULL, scaling_time = 1e3,
scalings = NULL, copy = T, start = NULL, stop = NULL)
expect_equal(colnames(out_mne_py), colnames(out_mne_r))
for (ii in 1:length(colnames(out_mne_py))) {
expect_equal(out_mne_py[,ii], out_mne_r[,ii])
}
}
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_r
out_mne_py
out_mne_py[,1] ==out_mne_r[,1]
out_mne_py[,2] ==out_mne_r[,2]
out_mne_py[,2]
out_mne_r[,2]
out_mne_py[,2]
out_mne_py[,2]
out_mne_r[,2]
devtools::test()
devtools::test()
library(mne)
pkgdown::build_reference()
pkgdown::build_site()
pkgdown::build_reference()
pkgdown::build_site()
pkgdown::build_reference()
pkgdown::build_site()
git st
devtools::buid_reference()
devtools::build_reference()
build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_site()
library(mne)
pkgdown::build_reference()
library(mne)
pkgdown::build_reference()
library(mne)
pkgdown::build_reference()
pkgdown::build_reference()
library(mne)
library(mne)
pkgdown::build_reference()
library(mne)
pkgdown::build_reference()
library(mne)
pkgdown::build_reference()
library(mne)
pkgdown::build_reference()
library(mne)
library(mne)
pkgdown::build_reference()
library(mne)
pkgdown::build_reference()
library(mne)
?pkgdown::build_reference
pkgdown::build_reference(preview = F)
pkgdown::build_reference(preview = F)
library(mne)
pkgdown::build_reference(preview = F)
library(mne)
pkgdown::build_reference(preview = F)
library(mne)
library(mne)
pkgdown::build_reference(preview = F)
library(mne)
pkgdown::build_reference(preview = F)
library(mne)
pkgdown::build_reference(preview = F)
pkgdown::build_site()
library(mne)
pkgdown::build_reference(preview = F)
pkgdown::build_site()
?get_data_frame
library(mne)
?get_data_frame
library(mne)
pkgdown::build_site()

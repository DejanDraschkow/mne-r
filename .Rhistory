cat("importing MNE-Python")
mne <<- mne
})
mne <- NULL
local({
mne <- import("mne")
if(exists(
"mne", globalenv())){
cat("Variable 'mne' exists already and is masked")
}
cat("importing MNE-Python")
mne <<- mne
})
mne <- NULL
mne
rm(mne)
mne
local({
mne <- import("mne")
if(exists(
"mne", globalenv())){
cat("Variable 'mne' exists already and is masked")
}
cat("importing MNE-Python")
mne <<- mne
})
local({
mne <- import("mne")
if(exists(
"mne", globalenv())){
cat("Variable 'mne' exists already and is masked")
}
cat("importing MNE-Python")
mne <<- mne
})
local({
mne <- import("mne")
if(exists(
"mne", globalenv())){
cat("Variable 'mne' exists already and is masked\n")
}
cat("importing MNE-Python")
mne <<- mne
})
class(mne)
class(mne)
class(mne)
class(mne)
class(mne)
library(mne)
library(mne)
library("mne")
devtools::install()
library(mne)
library(tidyverse)
mne
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
raw$filter(1, 40)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"  # R gets the events as floats.
tmin <- -0.2
tmax <- 0.5
baseline <- tuple(NULL, 0)
reticulate::array_reshape()
reticulate::array_reshape
reticulate::tuple
tuple
baseline <- reticulate::tuple(NULL, 0)
event_id <- list("aud/l" = 1L, "aud/r" = 2L, "vis/l" = 3L, "vis/r" = 4L)
picks <- mne$pick_types(raw$info, meg = T, eeg = T)
epochs <- mne$Epochs(raw = raw, events = events, event_id =event_id,
tmin = tmin, tmax = tmax,
picks = picks %>% as.integer(),
baseline = baseline, reject = NULL, preload = T)
evoked <- epochs$average()
# use MNE method
evoked_df <- evoked$to_data_frame(long_format = T)  # long
ggplot(
data = evoked_df,
mapping = aes(x = time, color = channel, y = observation)) +
geom_line(mapping = aes(group = channel)) +
facet_wrap(
~ch_type,
nrow = 3,
scales = "free",
strip.position = "left",
labeller = as_labeller(c(eeg = "EEG [mV]", grad = "GRAD [fT/cm]", mag = "MAG [fT]"))) +
theme_minimal() +
guides(color = F) +
labs(x = 'time [ms]', y = NULL) +
theme(text = element_text(family = "Helvetica", size = 24))
export
globalenv()
ls()
mne
mne$`__version__`
.onLoad <- function(libname, pkgname) {
# push MNE into global environment
mne <<- reticulate::import("mne", delay_load = TRUE)
cat(
sprintf(
"importing MNE version=%s, path='%s'", mne$`__version__`, mne$`__path__`)
}
cat(
sprintf(
"importing MNE version=%s, path='%s'", mne$`__version__`, mne$`__path__`))
devtools::install()
library(tidyverse)
library(mne)
library(tidyverse)
library(mne)
library(tidyverse)
library(mne)
mne$reticulate
reticulate::array_reshape()`
reticulate::array_reshape()
tuple
library(tidyverse)
library(mne)
library(reticulate)
library(tidyverse)
library(reticulate)
library(mne)
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
raw$filter(1, 40)
events <- mne$find_events(raw)
storage.mode(events) <- "integer"  # R gets the events as floats.
tmin <- -0.2
tmax <- 0.5
baseline <- reticulate::tuple(NULL, 0)
event_id <- list("aud/l" = 1L, "aud/r" = 2L, "vis/l" = 3L, "vis/r" = 4L)
picks <- mne$pick_types(raw$info, meg = T, eeg = T)
epochs <- mne$Epochs(raw = raw, events = events, event_id =event_id,
tmin = tmin, tmax = tmax,
picks = picks %>% as.integer(),
baseline = baseline, reject = NULL, preload = T)
evoked <- epochs$average()
ggplot(
data = evoked_df,
mapping = aes(x = time, color = channel, y = observation)) +
geom_line(mapping = aes(group = channel)) +
facet_wrap(
~ch_type,
nrow = 3,
scales = "free",
strip.position = "left",
labeller = as_labeller(c(eeg = "EEG [mV]", grad = "GRAD [fT/cm]", mag = "MAG [fT]"))) +
theme_minimal() +
guides(color = F) +
labs(x = 'time [ms]', y = NULL) +
theme(text = element_text(family = "Helvetica", size = 24))
# use MNE method
evoked_df <- evoked$to_data_frame(long_format = T)  # long
ggplot(
data = evoked_df,
mapping = aes(x = time, color = channel, y = observation)) +
geom_line(mapping = aes(group = channel)) +
facet_wrap(
~ch_type,
nrow = 3,
scales = "free",
strip.position = "left",
labeller = as_labeller(c(eeg = "EEG [mV]", grad = "GRAD [fT/cm]", mag = "MAG [fT]"))) +
theme_minimal() +
guides(color = F) +
labs(x = 'time [ms]', y = NULL) +
theme(text = element_text(family = "Helvetica", size = 24))
# we look up a private function from the epochs object
pos <- epochs$`_get_channel_positions`()
# we do the same normalization as in MNE
pos <- pos - apply(pos, 1, min)
pos <- pos / apply(pos, 1, function(x) {max(x, 1e-16)})
# we set rgb values
evoked_df$r <- pos[, 1]
evoked_df$g <- pos[, 2]
evoked_df$b <- pos[, 3]
ggplot(
data = evoked_df,
mapping = aes(x = time, color = channel, y = observation)) +
geom_line(mapping = aes(group = channel,
color = rgb(r, g, b)), size = 0.8, alpha=0.7) +
facet_wrap(
~ch_type,
nrow = 3,
scales = "free",
strip.position = "left",
labeller = as_labeller(c(eeg = "EEG [mV]", grad = "GRAD [fT/cm]", mag = "MAG [fT]"))) +
theme_minimal() +
guides(color = F) +
labs(x = 'time [ms]', y = NULL) +
theme(text = element_text(family = "Helvetica", size = 24))
mne_find_events <- mne$find_events
find_events <- function(...){
events <- mne_find_events(...)
storage.mode(events) <- "integer"  # R gets the events as floats.
return(events)
}
mne$find_events <- mne_find_events
mne
mne$find_events
??mne$find_events
?mne$find_events
mne$find_events
devtools::install()
library(tidyverse)
library(reticulate)
library(mne)
devtools::install("mne")
devtools::install()
library(tidyverse)
library(reticulate)
library(mne)
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
raw$filter(1, 40)
events <- mne$find_events(raw)
events
events %>% str
events %>% class
events[1] %>% class
mne$find_events
find_events()
find_events
find_events(raw)
find_events(raw) %>% str
mne$find_events
ffind_events
find_events
mne::mne$find_events
mne::mne
mne
mne::mne_find_events
mne::find_events()
mne::find_events\
mne::find_events
find_events
baseline <- c(NULL, 0)
event_id <- list("aud/l" = 1L, "aud/r" = 2L, "vis/l" = 3L, "vis/r" = 4L)
picks <- mne$pick_types(raw$info, meg = T, eeg = T)
epochs <- mne$Epochs(raw = raw, events = events, event_id =event_id,
tmin = tmin, tmax = tmax,
picks = picks %>% as.integer(),
baseline = baseline, reject = NULL, preload = T)
baseline <- c(NULL, 0L)
event_id <- list("aud/l" = 1L, "aud/r" = 2L, "vis/l" = 3L, "vis/r" = 4L)
picks <- mne$pick_types(raw$info, meg = T, eeg = T)
epochs <- mne$Epochs(raw = raw, events = events, event_id =event_id,
tmin = tmin, tmax = tmax,
picks = picks %>% as.integer(),
baseline = baseline, reject = NULL, preload = T)
storage.mode(events) <- "integer"  # R gets the events as floats.
baseline <- c(NULL, 0)
event_id <- list("aud/l" = 1L, "aud/r" = 2L, "vis/l" = 3L, "vis/r" = 4L)
picks <- mne$pick_types(raw$info, meg = T, eeg = T)
epochs <- mne$Epochs(raw = raw, events = events, event_id =event_id,
tmin = tmin, tmax = tmax,
picks = picks %>% as.integer(),
baseline = baseline, reject = NULL, preload = T)
baseline <- c(NULL, 0)
event_id <- list("aud/l" = 1L, "aud/r" = 2L, "vis/l" = 3L, "vis/r" = 4L)
picks <- mne$pick_types(raw$info, meg = T, eeg = T)
epochs <- mne$Epochs(raw = raw, events = events, event_id =event_id,
tmin = tmin, tmax = tmax,
picks = picks %>% as.integer(),
baseline = baseline, reject = NULL, preload = T)
baseline <- c(NULL, 0)
baseline
reticulate::tuple(NULL, 0)
mne$find_events
mne$find_events <- 1
mne$find_events
mne$find_events(!)
mne$find_events(1)
assign
?assign
env.profile()
env
environment()
?environment()
?environment(mne)
environment(mne)
env.current
current.envt
current.env
assign(
"find_events", find_events, envir=mne)
mne$find_events
mne$find_events <- find_events
mne$find_events
search()
mne::mne
mne::mne$find_events
assign(
"find_events", find_events, envir=mne, enclos=.GlobalEnv)
env.parent
parent.env()
parent.env
?parent.env
?current.env
\current.env
current.env
get
get("mne")
get.attre
get.attr
mne$find_events
devtools::install("mne")
devtools::install()
library(tidyverse)
library(reticulate)
library(mne)
mne$find_events
mne$find_events
find_events
mne_find_events
mne::mne$find_events
assign(
mne, find_events, envir=envir, enclos=.GlobalEnv)
assign(
mne, find_events, envir=envir)
find_events <- function(...){
events <- mne_find_events(...)
storage.mode(events) <- "integer"  # R gets the events as floats.
return(events)
}
assign(
mne, find_events, envir=envir)
env
get_env
search()
is.null()
is.null
is.null(MNe)
is.null(mne)
getNamespace("mnew")
getNamespace("mne")
getNamespace(NULL)
mne <- NULL
getNamespace(mne)
getNamespace("mne")
getNamespace("aaa")
getNamespace("mne")$find_events
getNamespace("mne")$Epochs
getNamespace("mne")
mne <- getNamespace("mne")
mne
rm()
ls
ls()
rm
ls(.)
ls(...)
devtools::install()
library(tidyverse)
library(reticulate)
library(mne)
mne$find_events
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
mne$find_events(raw)
mne$find_events(raw) %>% str
mne::mne_space
mne::mne_space$find_events()
mne::mne_space$find_events
devtools::install()
library(tidyverse)
library(reticulate)
library(mne)
mne$find_events
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
mne$find_events(raw) %>% str
devtools::install()
.rs.restartR()
library(tidyverse)
library(reticulate)
library(mne)
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
mne$find_events
mne$find_events(raw) %>% str
devtools::install()
library(tidyverse)
library(reticulate)
library(mne)
'sample_audvis_filt-0-40_raw.fif',
.rs.restartR()
library(tidyverse)
library(reticulate)
library(mne)
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
mne$find_events(raw) %>% str
devtools::install()
.rs.restartR()
library(tidyverse)
library(reticulate)
library(mne)
data_path <- mne$datasets$sample$data_path()
subject <- "sample"
raw_fname <- paste(data_path,
'MEG',
subject,
'sample_audvis_filt-0-40_raw.fif',
sep = '/')
raw <- mne$io$read_raw_fif(raw_fname, preload = T)
mne$find_events(raw) %>% str
mne
mne::find_events()
mne::find_events
mne$find_events <- mne::find_events
mne$find_events
mne <- getNamespace("mne")
unlockBinding("find_events", mne)
mne_find_events <- mne$find_events
mne <- getNamespace("mne")
unlockBinding("find_events", mne)
find_events <- function(...){
events <- mne_find_events(...)
storage.mode(events) <- "integer"  # R gets the events as floats.
return(events)
}
mne$find_events <- find_events
lockBinding("find_events", mne)
mne
mne$find_events()
mne$find_events(raw)
mne$find_events
mne$find_events(raw)
mne$mne_find_events(raw)
install.packages("pkgdown")
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
library(mne)
pkgdown::build_site()
library(mne)
mne
library(mne)
mne
librry(mne)
library(mne)
pkgdown::build_site()
devtools::install()
library(mne)
mne
ls()
search()
library(tidyverse)
library(mne)
data_path <- mne$datasets$sample$data_path()
library(mne)
library(mne)
mne
library(mne)
mne
mne::mne
mne <<- reticulate::import("mne", delay_load = TRUE)
mne
library(reticulate)
mne <- NULL
.onLoad <- function(libname, pkgname) {
# push MNE into global environment
mne <<- reticulate::import("mne", delay_load = TRUE)
cat(
sprintf(
"Imported MNE version=%s, path='%s'\n", mne$`__version__`, mne$`__path__`))
}
library()
